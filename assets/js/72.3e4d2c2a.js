(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{108:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"overview-of-adjustments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview-of-adjustments","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview of adjustments")]),a("p",[e._v("The "),a("code",[e._v("Spree::Adjustment")]),e._v(" model is used to track price adjustments. For example,\ntaxes and promotions generate price adjustments. Adjustments can be either a\npositive or a negative amount.")]),a("p",[e._v("Adjustments values come from "),a("a",{attrs:{href:"#adjustment-sources"}},[e._v("adjustment sources")]),e._v(" (a tax\nrate or promotion action), and then affect the total price of an\n"),a("a",{attrs:{href:"#adjustables"}},[e._v("adjustable")]),e._v(" (an order, line item, or shipment).")]),a("p",[e._v("Adjustments have the following attributes:")]),a("ul",[a("li",[a("code",[e._v("adjustable_type")]),e._v(" and "),a("code",[e._v("adjustable_id")]),e._v(": The object being adjusted. This object\nis a specific order, line item, or shipment.")]),a("li",[a("code",[e._v("source_type")]),e._v(" and "),a("code",[e._v("source_id")]),e._v(": The source of the adjustment – typically a tax\nrate or a promotion action.")]),a("li",[a("code",[e._v("amount")]),e._v(": The dollar amount of the adjustment.")]),a("li",[a("code",[e._v("label")]),e._v(": The label for the adjustment. This indicates what the adjustment is\nfor.")]),a("li",[a("code",[e._v("eligible")]),e._v(": Indicates whether the adjustment is eligible to adjust the object\nit is associated with.")]),a("li",[a("code",[e._v("included")]),e._v(": If set to "),a("code",[e._v("true")]),e._v(", the adjustment amount is included in the final\nprice of the object it is associated with. Otherwise, the adjustment is added\nto the total price. This property only applies to tax adjustments. See the\ntaxation documentation for more information.")]),a("li",[a("code",[e._v("finalized")]),e._v(": Indicates whether the adjustment is finalized. If set to "),a("code",[e._v("true")]),e._v(",\nthen the adjustment is no longer automatically updated.")])]),a("h2",{attrs:{id:"adjustment-sources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adjustment-sources","aria-hidden":"true"}},[e._v("#")]),e._v(" Adjustment sources")]),a("p",[e._v("Adjustment values are sourced from other objects. Typically, a "),a("code",[e._v("Spree::TaxRate")]),e._v("\nor a "),a("code",[e._v("Spree::PromotionAction")]),e._v(" provide the "),a("code",[e._v("amount")]),e._v(" value to an adjustment.")]),a("p",[e._v("The following objects are the sources of adjustments:")]),a("ul",[a("li",[a("code",[e._v("Spree::PromotionAction")]),e._v(": An amount generated by promotion rules.")]),a("li",[a("code",[e._v("Spree::TaxRate")]),e._v(": An amount generated by a tax rate.")]),a("li",[a("code",[e._v("Spree::UnitCancel")]),e._v(": The amount of an inventory unit that was ordered but\nnever shipped.")]),a("li",[a("code",[e._v("Spree::ReturnAuthorization")]),e._v(": The amount from a line item that is being\nreturned.")])]),a("h3",{attrs:{id:"tax-adjustments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tax-adjustments","aria-hidden":"true"}},[e._v("#")]),e._v(" Tax adjustments")]),a("p",[e._v("Note that tax adjustments may be treated differently than promotional\nadjustments in some circumstances:")]),a("ul",[a("li",[e._v("By default, tax adjustments are always applied before promotional adjustments.\nThis is to comply with well-known tax regulations. See the taxation\ndocumentation for more information.")]),a("li",[e._v("Typically, an adjustment's value is added to the price of the object it is\nassociated with. However, value-added tax adjustments are already included in\nthe price and do not change any totals.")])]),a("h2",{attrs:{id:"adjustables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adjustables","aria-hidden":"true"}},[e._v("#")]),e._v(" Adjustables")]),a("p",[e._v("Adjustables are the objects whose prices can be adjusted. The following objects\ncan be adjustables:")]),a("ul",[a("li",[a("code",[e._v("Spree::Order")]),e._v(": The adjustment for an entire order.")]),a("li",[a("code",[e._v("Spree::LineItem")]),e._v(": The adjustment for a single line item on an order.")]),a("li",[a("code",[e._v("Spree::Shipment")]),e._v(": The adjustment for the price of shipping.")])]),a("h2",{attrs:{id:"charges-vs-credits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#charges-vs-credits","aria-hidden":"true"}},[e._v("#")]),e._v(" Charges vs. credits")]),a("p",[e._v("Adjustments can be positive or negative amounts. For convenience, you can use the\n"),a("a",{attrs:{href:"adjustment-scopes.html.markdown"}},[e._v("adjustment scopes")]),a("code",[e._v("charge")]),e._v(" or "),a("code",[e._v("credit")]),e._v(" to\nretrieve only positive or negative amounts.")]),a("h2",{attrs:{id:"adjustment-scopes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adjustment-scopes","aria-hidden":"true"}},[e._v("#")]),e._v(" Adjustment scopes")]),a("p",[e._v("You can call "),a("a",{attrs:{href:"http://guides.rubyonrails.org/active_record_querying.html#scopes",target:"_blank",rel:"noopener noreferrer"}},[e._v("scopes")]),e._v(" on "),a("code",[e._v("Spree::Adjustment")]),e._v("s themselves or on any\nclass that has an "),a("code",[e._v("adjustments")]),e._v(" association – like orders, line items, and or\nshipments.")]),a("p",[e._v("For example, you can find all of the adjustments with an "),a("code",[e._v("eligible")]),e._v(" value of\n"),a("code",[e._v("true")]),e._v(" for orders, line items, and shipments:")]),a("ul",[a("li",[a("code",[e._v("Spree::Order.find(1).adjustments.eligible")]),e._v(": Returns all of the eligible\nadjustments on the order with the ID "),a("code",[e._v("1")]),e._v(".")]),a("li",[a("code",[e._v("Spree::LineItem.find(1).adjustments.eligible")]),e._v(": Returns all of the eligible\nadjustments on the line item with the ID "),a("code",[e._v("1")]),e._v(".")]),a("li",[a("code",[e._v("Spree::Shipment.find(1).adjustments.eligible")]),e._v(": Returns all of the eligible\nadjustments on the shipment with the ID "),a("code",[e._v("1")]),e._v(".")])]),a("h3",{attrs:{id:"list-of-adjustment-scopes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-of-adjustment-scopes","aria-hidden":"true"}},[e._v("#")]),e._v(" List of adjustment scopes")]),a("ul",[a("li",[a("code",[e._v("tax")]),e._v(": Returns adjustments sourced from a "),a("code",[e._v("Spree::TaxRate")]),e._v(" object.")]),a("li",[a("code",[e._v("price")]),e._v(": Returns adjustments that adjust a "),a("code",[e._v("Spree::LineItem")]),e._v(" object.")]),a("li",[a("code",[e._v("shipping")]),e._v(": Returns adjustments that adjust a "),a("code",[e._v("Spree::Shipment")]),e._v(" object.")]),a("li",[a("code",[e._v("promotion")]),e._v(": Returns adjustments sourced from a "),a("code",[e._v("Spree::PromotionAction")]),e._v("\nobject.")]),a("li",[a("code",[e._v("return_authorization")]),e._v(": Returns adjustments sourced from a\n"),a("code",[e._v("Spree::ReturnAuthorization")]),e._v(" object.")]),a("li",[a("code",[e._v("eligible")]),e._v(": Returns adjustments that are "),a("code",[e._v("eligible")]),e._v(" to adjust the adjustable\nobject that they are associated with. For example, if a tax adjustment is\neligible, it would be successfully applied to its line item.")]),a("li",[a("code",[e._v("charge")]),e._v(": Returns adjustments with a positive value.")]),a("li",[a("code",[e._v("credit")]),e._v(": Returns adjustments with a negative value.")]),a("li",[a("code",[e._v("is_included")]),e._v(": Returns adjustments that are included in the object's price.\nTypically, only value-added tax adjustments have this value.")]),a("li",[a("code",[e._v("additional")]),e._v(": Adjustments which modify the object's price. The default for all\nadjustments.")])]),a("h2",{attrs:{id:"adjustment-associations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adjustment-associations","aria-hidden":"true"}},[e._v("#")]),e._v(" Adjustment associations")]),a("p",[a("code",[e._v("Spree::Order")]),e._v("s, "),a("code",[e._v("Spree::LineItem")]),e._v("s, and "),a("code",[e._v("Spree::Shipment")]),e._v("s are all\n"),a("a",{attrs:{href:"#adjustables"}},[e._v("adjustables")]),e._v(".")]),a("p",[e._v("To retrieve these adjustments on an order, call the "),a("code",[e._v("adjustments")]),e._v("\nassociation:")]),a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{attrs:{class:"token constant"}},[e._v("Spree")]),a("span",{attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{attrs:{class:"token constant"}},[e._v("Order")]),a("span",{attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{attrs:{class:"token function"}},[e._v("find")]),a("span",{attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{attrs:{class:"token number"}},[e._v("1")]),a("span",{attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{attrs:{class:"token punctuation"}},[e._v(".")]),e._v("adjustments\n")])]),a("p",[e._v("If you want to retrieve the line item adjustments, you can use the\n"),a("code",[e._v("line_item_adjustments")]),e._v(" method:")]),a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{attrs:{class:"token constant"}},[e._v("Spree")]),a("span",{attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{attrs:{class:"token constant"}},[e._v("Order")]),a("span",{attrs:{class:"token punctuation"}},[e._v(".")]),e._v("line_item_adjustments\n")])]),a("p",[e._v("Or, if you want to retrieve the shipment adjustments, you can use the\n"),a("code",[e._v("shipment_adjustments")]),e._v(" method:")]),a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{attrs:{class:"token constant"}},[e._v("Spree")]),a("span",{attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{attrs:{class:"token constant"}},[e._v("Order")]),a("span",{attrs:{class:"token punctuation"}},[e._v(".")]),e._v("shipment_adjustments\n")])]),a("p",[e._v("Finally, if you want to retrieve all of the adjustments on the order, you can\nuse the "),a("code",[e._v("all_adjustments")]),e._v(" method.")]),a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{attrs:{class:"token constant"}},[e._v("Spree")]),a("span",{attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{attrs:{class:"token constant"}},[e._v("Order")]),a("span",{attrs:{class:"token punctuation"}},[e._v(".")]),e._v("all_adjustments\n")])])])}],!1,null,null,null);t.default=n.exports}}]);