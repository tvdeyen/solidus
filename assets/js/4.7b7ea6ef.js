(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{122:function(e,a,r){"use strict";r.r(a);var n=r(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"versioning-guidelines"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#versioning-guidelines","aria-hidden":"true"}},[e._v("#")]),e._v(" Versioning guidelines")]),r("p",[e._v("Traditional Spree development involved a lot of overriding behavior through\n"),r("code",[e._v("class_eval")]),e._v(" and overriding views either through "),r("a",{attrs:{href:"https://github.com/spree/deface",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deface")]),e._v(" or by\nreplacing them. This made upgrading, even through the same "),r("code",[e._v("X-Y-stable")]),e._v(" branch,\nquite dangerous and error-prone.")]),r("p",[e._v("Our main goal for the Solidus project is to define proper extension points so\nthat fewer breaking changes are introduced, and those that are introduced are\neasily found.")]),r("h2",{attrs:{id:"semantic-versioning"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#semantic-versioning","aria-hidden":"true"}},[e._v("#")]),e._v(" Semantic versioning")]),r("p",[e._v("As we develop Solidus, we aim to follow "),r("a",{attrs:{href:"http://semver.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Semantic Versioning")]),e._v(" as closely\nas we can.")]),r("h3",{attrs:{id:"patch-versions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#patch-versions","aria-hidden":"true"}},[e._v("#")]),e._v(" Patch versions")]),r("p",[e._v("Patch versions ("),r("code",[e._v("x.y.Z")]),e._v(") are reserved for small bug fixes and security patches.\nCommits are added sparingly to ensure that stores can always stay on the latest\npatch version.")]),r("p",[e._v("The internal call structure should be maintained so that any overrides to\nmethods can still be called in the same way. Exceptions may be made for security\nfixes if necessary.")]),r("h3",{attrs:{id:"minor-versions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#minor-versions","aria-hidden":"true"}},[e._v("#")]),e._v(" Minor versions")]),r("p",[e._v("Minor versions ("),r("code",[e._v("x.Y.z")]),e._v(") are for any backwards-compatible changes to the public\nAPI.")]),r("p",[e._v("This is tough to define because our public API could be considered to be all of\nthe methods on all of our ActiveRecord objects, which is not feasible to\nmaintain. We use our best judgment about what methods are being used, but there\nmay still be incompatible changes. Methods we have documented should only have\nbackwards-compatible changes.")]),r("p",[e._v("Any "),r("code",[e._v("class_eval")]),e._v(" overrides or Deface overrides may not be called any more or be\ncalled in a different way. We use our best judgment to add extension points when\nwe suspect there would be a store with an override.")]),r("p",[e._v("We would like to also follow the Rails approach: deprecating functionality in\none minor version and removing it in the next.")]),r("h3",{attrs:{id:"major-versions"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#major-versions","aria-hidden":"true"}},[e._v("#")]),e._v(" Major versions")]),r("p",[e._v("Major version ("),r("code",[e._v("X.y.z")]),e._v(") are for backwards incompatible changes. We will make an\neffort to document breaking changes (and all meaningful changes) in the release\nnotes.")]),r("h2",{attrs:{id:"end-of-life-policy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#end-of-life-policy","aria-hidden":"true"}},[e._v("#")]),e._v(" End of life policy")]),r("p",[e._v("We want to offer critical security patches for older versions of Solidus.\nHowever, we cannot offer support for every minor version back to 1.0.")]),r("p",[e._v("To allow us to patch security issues promptly, and to make sure developers know\nhow long their Solidus version will receive security updates, we use the\nfollowing end of life policy:")]),r("p",[r("strong",[e._v("Solidus versions receive security patches for 18 months following their\ninitial release.")])]),r("p",[e._v("For example, Solidus 2.4 was released on November, 7, 2017, and will receive\ncritical patches until May 7, 2019.")]),r("p",[e._v("This end of life policy affects all minor versions of Solidus following 2.0.")])])}],!1,null,null,null);a.default=o.exports}}]);